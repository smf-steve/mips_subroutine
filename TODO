TODO:
1. Run the program twice to see if you get different outputs
   - diff outputs could mean that state of the machine was not initialized
   - here we can check the value of $v0, it should always be the same
   - this can't be a warning or error, but a notice
     - since we con't know if the subroutine is an abstraction for
        * a proc, method, or a true functioin.

1. Refine mips_subroutine to detect and/or address the following CLI issues
   - mips_subroutine  file.s arg1 arg2 ...
     * should be file
   - mips_subroutine  path/file arg1 arg2 ...
     * make cwd path
     * then run the program
     * that way type files are placed in that location
     * but output filter should show (?) should not show the entire "path/file"

1. validate pretty print for
   - char
   - double
   - all arrays
   
1. cleanup mips_subroutine.md
1. cleanup README.md

1. Modify the input processing for numbers to convert to base notation
   --  0x = 16#
   --  0b -> 2#
   --  0o -> 8#

1. test the input types
1. Add U+xxxx for an input type

1. Output format into .md format
1. Add the output of arrays  (arrays shol)
   1. array of ints
      1 : 0x01 : 0o001 :  0x0000 0000 0000 0001 \n
      2 : \n3\n4\n 
   1. array of chars
      '1' '2' '3' '4'
   1. string
       "1234"

mips_subroutine

-- need to have a project mode and not project mode
   - non-project just calls the subroutine
   - project mode pulls in all code from the subdirectory
   * part of the problem is linkage

   mips_subroutine entry -l <files>  [args ]
   mips_subroutine strrcpy -l strchr [args]
       # mars a ae1 strrcpy.s strchr.s
   mips_subroutine strrcpy -l *.s [args]


   mips_subroutine strrcpy -l .  strchr [args]
      -- if the arg is a directory, add all *.s
      -- if the arg is not a direciory add <name>.s

======
0-- the .md file status
    Any output from the user subroutine should ensure a newline ('\n') is the last
    character printed. 

    This ensures the return value of the function is printed 
    properly.  (This is fixed)
-- is this true.
======

Seems to be an error recreating .boot.s if
  -- the last run was successful?
  -- the last run was not successful?
validate that the output of
   char and char[] are integers
   there is no easy way to convert 'c' to decimal
   but it is trival to go the other way

Don't need subarray return type convention

Incorporate all output into the MIPS code.
            (i.e., don't insert just subroutine needed for the current program.)

default input: 
    list: i.e., flat array
    base: each arg is set to its base type
    MIPS arg convention is honored

-A:
    a0: array.len
    a1: pointer to an array that contains base values

-S:
    all base values are converted to a string

-A + -S -->  --argv structure

If you want an array of ints,
   -A: with all values an int

If you want an array of doubles
   -A: with all value as doubles
   -bad example:
      -A  sub  1.1 3.4 2 4.2
   -good example:
      -A  sub  1.1 3.4. 2.2 4.2

Limitatins.
  - subl only allows one input form
    1. a list of arguements
    1. an array of arguments
  - subl only allows the following scalar type
    1. integer
    1. double
    1. string

  - onoy one array can be passed in.


   sub  [ 1  2  3  4]  [ 1  2  3  4]

      -s : summarize the execution of the program 
           e.g., sub(1,2,3) returns $v0

           how is $v0 represented if other "nice" return values are provided.

-L:  list of input values:  

- I might be able to clean tings up abit if..
  - a new file is created (#3) for mips-subroutine


TODO

move position_msb into the OS INTERFACE
Define macro call msb

.macro msb(%rt, %rs)
.macro msbi(%rt, %rs)


The following presents a problem, 
because the value of $v0 is overwritten by the macro

                # Provide some output for initial testing
                print_t($v0)
                print_ci('\n')

                # Marshall  your output arguements
                move $v0, $v0



      | JAVA: Other                   | MIPS Macro                |
      | `x= mips.msb`                 | `msb x, a`                |


